@page "/drop"
@using NewsPortal.Application
@using NewsPortal.Entity
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject AppState AppState
@inject NavigationManager Navigation

<div class="dropdown" style="position: relative;">
    <button class="btn btn-outline-secondary dropdown-toggle d-flex align-items-center"
            type="button"
            @onclick="ToggleDropdown"
            style="border-radius: 2rem; padding: 0.4rem 1rem; font-size: 0.9rem;">
        <i class="bi bi-person-circle me-2"></i>
        @(AppState.IsLoggedIn && AppState.currentUser != null
            ? AppState.currentUser.Email.Split('@')[0]
            : "Guest")
    </button>

    @if (isOpen)
    {
        <div class="dropdown-menu show mt-2 p-2 shadow-sm rounded-3"
             style="min-width: 160px; right: 0; left: auto; position: absolute;">
            @if (AppState.currentUser != null)
            {
                <button class="dropdown-item d-flex align-items-center"
                        @onclick="() => NavigateToEdit(AppState.currentUser.Id)">
                    <i class="bi bi-gear me-2"></i> Update Info
                </button>
            }

            <div class="dropdown-divider"></div>

            <a class="dropdown-item d-flex align-items-center text-danger logbtn">
                <i class="bi bi-box-arrow-right me-2"></i>
                <NewsPortal.Components.Pages.LogOut />
            </a>
        </div>
    }
</div>

<style>
    .logbtn {
    /*float: left; */
    margin:0 !important;
    padding:0 !important; 
    } 
    .dropdown {
    position: relative;
    display: inline-block;
    }

    .dropdown-toggle {
     background-color:  #495057;
    color: white;
    padding: 10px;
    border-radius: 5px;
    border: none;
    }

    .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    width: max-content;
    min-width: 120px;
    max-width: 90vw;
    z-index: 1000;
    padding: 10px;
    color: black;
    background-color: white;
    box-sizing: border-box;
    }


    .dropdown-item {
    width: 50%;
    /* padding: 4px; */
    text-align:center;
    border: none;
    background: none;
    }

    .dropdown-item:hover,
    .dropdown-item:focus,
    .dropdown-item:active {
    background-color: transparent !important; /* or your preferred hover color */
    color: black !important; /* Ensure text color stays visible */
    }

</style>

@code {
    private bool isOpen = false;

    private RegisterUser user;

    private async Task ToggleDropdown()
    {
        isOpen = !isOpen;
        await JS.InvokeVoidAsync("console.log", $"Dropdown is {(isOpen ? "open" : "closed")}");
        StateHasChanged(); // optional, ensures update
    }

    private void NavigateToEdit(int id)
    {
        // Navigation.NavigateTo($"/update/{id}");
        Navigation.NavigateTo($"/UpdateUser/{id}");

    }
}
