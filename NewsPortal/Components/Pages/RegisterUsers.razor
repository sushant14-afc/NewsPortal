@page "/Register"
@rendermode InteractiveServer
@using NewsPortal.DTOs
@inject HttpClient Http




<h3 class="text-center">Register User</h3>

<EditForm Model="@registerUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mt-3">
        <label><b>Email :</b></label>
        <InputText @bind-Value="registerUser.Email" class="form-control" />
    </div>

    <div class="form-group mt-3">
        <label><b>Password :</b></label>
        <InputText @bind-Value="registerUser.Password" type="password" class="form-control" />
    </div>

    <div class="form-group mt-3">
        <label><b>Confirm Password :</b></label>
        <InputText @bind-Value="registerUser.ConfirmPassword" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Register</button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger mt-5">@Message</div>
    }
</EditForm>

@code {
    private RegisterUserDtos registerUser = new();

    private string Message;


    private async Task HandleRegister()
    {
        var res = await Http.PostAsJsonAsync("api/RegisterUsers/User", registerUser);

        if(res.IsSuccessStatusCode)
        {
            
            Message = "Registration Sucessfull";
            Console.WriteLine("Registration Sucessfull");
            registerUser = new RegisterUserDtos();
        }
        else
        {
            var error = await res.Content.ReadAsStringAsync();
            Message = error;
            
        }
    }

}
