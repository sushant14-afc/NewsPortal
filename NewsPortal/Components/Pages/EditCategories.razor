@page "/editCategories/{Id:int}"
@using NewsPortal.Entity
@rendermode InteractiveServer
@inject HttpClient _http
@inject NavigationManager Navigation


@if(_category == null)
{
    <p>Loading.....</p>
}
else
{
    <div class="container d-flex justify-content-center mt-5">
        <div class="card shadow p-4" style="width: 30rem; border-radius: 1rem;">
            <h4 class="text-center mb-4">Edit Category</h4>

            <EditForm Model="_category" OnValidSubmit="EditCategory">
                <div class="form-group">
                    <label for="categoryName"><b>Category Name</b></label>
                    <input type="text" id="categoryName" @bind="_category.CategoryName" class="form-control" required />
                </div>

                <button type="submit" class="btn btn-primary mt-4 w-100">Update Category</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">
                    @successMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private Category _category;

    private string successMessage;

    private string errorMessage;

    private async Task EditCategory()
    {
        var response = await _http.PutAsJsonAsync($"api/Categories/Edit/{Id}", _category);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AddCategories");
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _category = await _http.GetFromJsonAsync<Category>($"api/Categories/Category/{Id}");
    }
}
