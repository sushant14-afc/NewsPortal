@page "/AddCategories"
@rendermode InteractiveServer
@using NewsPortal.Entity
@inject HttpClient _http


<div class="container d-flex justify-content-center mt-5">
    <div class="card shadow p-4" style="width: 30rem; border-radius: 1rem;">
        <h4 class="text-center mb-4">Add New Category</h4>

        <EditForm Model="category" OnValidSubmit="CreateCategory">
            <div class="form-group">
                <label for="categoryName"><b>Category Name</b></label>
                <input type="text" id="categoryName" @bind="category.CategoryName" class="form-control" required />
            </div>

            <button type="submit" class="btn btn-primary mt-4 w-100">Add Category</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(successMessageForCreate))
        {
            <div class="alert alert-success mt-3">
                @successMessageForCreate
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessageForError))
        {
            <div class="alert alert-danger mt-3">
                @errorMessageForError
            </div>
        }
    </div>
</div>


<div class="container mt-5">

    @if (categories == null)
    {
        <div class="alert alert-info">Loading categories...</div>
    }
    else if (categories.Any())
    {
        <div class="container mt-5" style="background-color: #f8f9fa; padding: 2rem; border-radius: 1rem; box-shadow: 0 0 15px rgba(0,0,0,0.1);">
            <h3 class="mb-4 text-center">Manage Categories</h3>

            <table class="table table-hover table-striped table-bordered rounded">
                <thead class="table-dark">
                    <tr>
                        <th>Category Name</th>
                        <th style="width: 200px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in categories)
                    {
                        <tr>
                            <td class="align-middle">@category.CategoryName</td>
                            <td class="align-middle">
                                <a class="btn btn-sm btn-outline-primary me-2" href="/editCategories/@category.Id">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCategory(category.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (!string.IsNullOrEmpty(successMessageForCategory))
            {
                <div class="alert alert-success mt-3">
                    @successMessageForCategory
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessageForCategory))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessageForCategory
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning">No categories found.</div>
    }
</div>




@code {
    [Parameter]
    public int Id { get; set; }

    private Category category = new();

    private string successMessageForCreate;

    private string errorMessageForError;

    private string successMessageForCategory;

    private string errorMessageForCategory;

    private List<Category> categories;

    private async Task CreateCategory()
    {
        var response = await _http.PostAsJsonAsync<Category>("api/Categories/CreateCategory", category);

        if(response.IsSuccessStatusCode)
        {
            successMessageForCreate = await response.Content.ReadAsStringAsync();
            await LoadCategories();
        }
        else
        {
            errorMessageForError = await response.Content.ReadAsStringAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }  

    private async Task LoadCategories()
    {
        var response = await _http.GetFromJsonAsync<List<Category>>("api/Categories/GetCategories");

        if (response != null)
        {
            categories = response;  // Update the categories list
        }

        // Ensure UI is updated after data change
        StateHasChanged();
    }


    private async Task DeleteCategory(int id)
    {
        var res = await _http.DeleteAsync($"api/Categories/DelCategory/{id}");

        if(res.IsSuccessStatusCode)
        {
            successMessageForCategory = await res.Content.ReadAsStringAsync();
            await LoadCategories();
        }
        else
        {
            errorMessageForCategory = await res.Content.ReadAsStringAsync();
        }
    }
}