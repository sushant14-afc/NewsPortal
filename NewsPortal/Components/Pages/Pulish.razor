@page "/publishNews"
@rendermode InteractiveServer
@using NewsPortal.Application
@using NewsPortal.Entity
@using NewsPortal.Enums
@inject IWebHostEnvironment _webhost
@inject HttpClient Http
@using System.Text.Json
@inject AppState AppState
@inject NavigationManager Navigation




<h3 class="text-center">Publish a News</h3>


<form @onsubmit="HandleSubmit">

    <div>
        <label><b>Title: *</b></label>
        <input type="text" @bind="news.Title" class="form-control" required/>
    </div>

    <div>
        <label class="mt-3"><b>Category: *</b></label>
        <select @bind="news.Category" class="form-control" required>
            <option value="">-- Select Category --</option>
            @foreach (var category in Enum.GetValues(typeof(NewsCategoryEnum)))
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>

    <div>
        <label class="mt-3"><b>Description: *</b></label>
        <textarea @bind="news.Description" class="form-control" required></textarea>
    </div>

    <div>
        <label class="mt-3"><b>Image: *</b></label>
        <InputFile OnChange="HandleFileChange" required/>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Publish</button>

</form>

@code {


    private NewsEntity news = new();

    // private List<Category> categoryList;

    private async Task HandleSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/News/create_news", news);

        if (response.IsSuccessStatusCode)
        {
            
            Console.WriteLine("Success!");
            news = new NewsEntity();
        }
        else
        {
            Console.WriteLine("Failed!");
        }
    }




    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Set the destination folder inside wwwroot (e.g., /images/)
            var folderPath = Path.Combine(_webhost.ContentRootPath, "wwwroot", "images");

            // Make sure the folder exists
            // if (!Directory.Exists(folderPath))
            // {
            //     Directory.CreateDirectory(folderPath);
            // }

            // Generate a unique file name to avoid collisions
            var fileName = Path.Combine(folderPath, Guid.NewGuid().ToString() + Path.GetExtension(file.Name));

            // Save the file to the folder
            using (var fileStream = new FileStream(fileName, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }

            // Set the image URL to be sent to the database
            news.ImageUrl = $"/images/{Path.GetFileName(fileName)}"; // URL to store in the database
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.IsLoggedIn)
        {
            Navigation.NavigateTo("/login", forceLoad: true);  // Redirect to login if not logged in
            return;  // Prevent further execution if user isn't logged in
        }

        
    }

}
