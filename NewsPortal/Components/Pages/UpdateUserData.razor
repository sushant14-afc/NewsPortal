@page "/UpdateUser/{Id:int}"
@rendermode InteractiveServer
@using NewsPortal.Application
@using NewsPortal.DTOs
@using NewsPortal.Entity
@inject HttpClient _http
@inject NavigationManager Navigation
@inject AppState AppState


<div class="border rounded p-3 mb-4">
    @if (!AppState.IsLoggedIn)
    {
        <p>Page not found.</p>
    }
    else if (_currentUser == null)
    {
        < p > Loading user data...</ p >
    }
    else
    {
        <div class="container my-4">
            <div class="card shadow-sm mx-auto" style="max-width: 32rem; border-radius: 0.75rem;">
                <div class="card-body">
                    <h5 class="card-title mb-3 text-center">Your Account</h5>

                    <div class="mb-3">
                        <label class="form-label"><strong>Email Address</strong></label>
                        <input type="email" class="form-control bg-light" value="@_currentUser.Email" readonly />
                    </div>
                </div>
            </div>
        </div>


        <!-- Updating Email -->
        <div class="container my-4">
            <div class="card shadow-sm mx-auto" style="max-width: 32rem; border-radius: 0.75rem;">
                <div class="card-body p-4">
                    <h4 class="card-title text-center mb-4">Change Email</h4>

                    <EditForm Model="@_updateEmailData" OnValidSubmit="UpdateEmail">
                        <div class="mb-3">
                            <label for="email" class="form-label"><strong>New Email</strong></label>
                            <input type="email" class="form-control" id="email" @bind="_updateEmailData.Email" placeholder="Enter new email" required />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label"><strong>Current Password</strong></label>
                            <input type="password" class="form-control" id="password" @bind="_updateEmailData.CurrentPassword" placeholder="Enter current password" required />
                        </div>

                        @if (!string.IsNullOrEmpty(successMessageForEmail))
                        {
                            <div class="alert alert-success text-center mt-3" role="alert">
                                @successMessageForEmail
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessageForEmail))
                        {
                            <div class="alert alert-danger text-center mt-3" role="alert">
                                @errorMessageForEmail
                            </div>
                        }

                        <button type="submit" class="btn btn-primary w-100 mt-3">Update Email</button>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- Updating Password -->
        <div class="container my-4">
            <div class="card shadow-sm mx-auto" style="max-width: 32rem; border-radius: 0.75rem;">
                <div class="card-body p-4">
                    <h4 class="card-title text-center mb-4">Change Password</h4>

                    <EditForm Model="@_updatePasswordData" OnValidSubmit="UpdatePassword">
                        <!-- Current Password -->
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label"><strong>Current Password</strong></label>
                            <input type="password" class="form-control" id="currentPassword" @bind="_updatePasswordData.CurrentPassword" placeholder="Enter current password" required />
                        </div>

                        <!-- New Password -->
                        <div class="mb-3">
                            <label for="newPassword" class="form-label"><strong>New Password</strong></label>
                            <input type="password" class="form-control" id="newPassword" @bind="_updatePasswordData.NewPassword" placeholder="Enter new password" required />
                        </div>

                        <!-- Re-Enter New Password -->
                        <div class="mb-3">
                            <label for="reenterPassword" class="form-label"><strong>Re-enter New Password</strong></label>
                            <input type="password" class="form-control" id="reenterPassword" @bind="_updatePasswordData.ReEnterPassword" placeholder="Re-enter new password" required />
                        </div>

                        @if (!string.IsNullOrEmpty(successMessageForPassword))
                        {
                            <div class="alert alert-success text-center mt-3" role="alert">
                                @successMessageForPassword
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessageForPassword))
                        {
                            <div class="alert alert-danger text-center mt-3" role="alert">
                                @errorMessageForPassword
                            </div>
                        }

                        <button type="submit" class="btn btn-primary w-100 mt-3">Update Password</button>
                    </EditForm>
                </div>
            </div>
        </div>

    }
</div>




@code {
    [Parameter]
    public int Id { get; set; }

    private RegisterUser _currentUser;

    private UpdateEmail _updateEmailData = new();

    private UpdatePassword _updatePasswordData = new();

    private string errorMessageForEmail;

    private string successMessageForEmail;

    private string errorMessageForPassword;

    private string successMessageForPassword;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await _http.GetFromJsonAsync<RegisterUser>($"api/RegisterUsers/getUser/{Id}");
    }

    //Email
    private async Task UpdateEmail()
    {
        var res = await _http.PutAsJsonAsync($"api/RegisterUsers/UpdateEmail/{Id}", _updateEmailData);
        if (res.IsSuccessStatusCode)
        {
            successMessageForEmail = await res.Content.ReadAsStringAsync();
            Navigation.NavigateTo("/News");
        }
        else
        {
            errorMessageForEmail = await res.Content.ReadAsStringAsync();
        }
    }

    //Password
    private async Task UpdatePassword()
    {
        var res = await _http.PutAsJsonAsync($"api/RegisterUsers/UpdatePassword/{Id}", _updatePasswordData);
        if (res.IsSuccessStatusCode)
        {
            successMessageForPassword = await res.Content.ReadAsStringAsync();
            Navigation.NavigateTo("/News");
        }
        else
        {
            errorMessageForPassword = await res.Content.ReadAsStringAsync();
        }
    }

}
