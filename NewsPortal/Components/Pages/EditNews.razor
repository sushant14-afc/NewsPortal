@page "/edit/{Id:int}"
@rendermode InteractiveServer
@using NewsPortal.Entity
@using NewsPortal.Enums
@inject IWebHostEnvironment _webhost
@inject HttpClient _http
@inject NavigationManager Navigation


<h3 class="text-center">Edit News</h3>

@if(news == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form @onsubmit="UpdateNews">

        <div>
            <label><b>Title: *</b></label>
            <input type="text" @bind="news.Title" class="form-control" required />
        </div>

        <div>
            <label class="mt-3"><b>Category: *</b></label>
            <select @bind="news.Category" class="form-control" required>
                <option value="">-- Select Category --</option>
                @foreach (var category in Enum.GetValues(typeof(NewsCategoryEnum)))
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>

        <div>
            <label class="mt-3"><b>Description: *</b></label>
            <textarea @bind="news.Description" class="form-control" required></textarea>
        </div>

        @if (!string.IsNullOrEmpty(news.ImageUrl))
        {
            <div class="mt-3">
                <img src="@news.ImageUrl" alt="Current Image" class="img-thumbnail" style="max-height: 200px; object-fit: cover;" />
                <p><em>Click below to update the image</em></p>
            </div>
        }

        <div>
            <label class="mt-1"><b>Image: *</b></label>
            <InputFile OnChange="HandleFileChange" required="@string.IsNullOrEmpty(news.ImageUrl)" />
        </div>

        <button type="submit" class="btn btn-success mt-3">
            @if (isUpdating)
            {
                <span>
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    Updating...
                </span>
            }
            else
            {
                <span>Update</span>
            }
        </button>

    </form>
}


@code {
    [Parameter]
    public int Id{ get; set; }

    private NewsEntity news;

    private bool isUpdating = false;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Set the destination folder inside wwwroot (e.g., /images/)
            var folderPath = Path.Combine(_webhost.ContentRootPath, "wwwroot", "images");

            // Make sure the folder exists
            // if (!Directory.Exists(folderPath))
            // {
            //     Directory.CreateDirectory(folderPath);
            // }

            // Generate a unique file name to avoid collisions
            var fileName = Path.Combine(folderPath, Guid.NewGuid().ToString() + Path.GetExtension(file.Name));

            // Save the file to the folder
            using (var fileStream = new FileStream(fileName, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }

            // Set the image URL to be sent to the database
            news.ImageUrl = $"/images/{Path.GetFileName(fileName)}"; // URL to store in the database
        }
    }

    private async Task UpdateNews()
    {
        isUpdating = true;
        var response = await _http.PutAsJsonAsync($"api/News/edit/{Id}", news);

        if(response.IsSuccessStatusCode)
        {
            await Task.Delay(2000);
            Navigation.NavigateTo("/News");
        }
        else
        {
            Console.WriteLine("Error updating News");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        news = await _http.GetFromJsonAsync<NewsEntity>($"api/News/{Id}");
    }

}
