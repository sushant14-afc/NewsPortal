@page "/edit/{Id:int}"
@rendermode InteractiveServer
@using NewsPortal.Entity
@using NewsPortal.Enums
@inject IWebHostEnvironment _webhost
@inject HttpClient _http
@inject NavigationManager Navigation


@if(news == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form @onsubmit="UpdateNews">

        <div class="container d-flex justify-content-center align-items-center py-5" style="min-height: 100vh; background-color: #f5f7fa;">
            <div class="card shadow-lg p-5 w-100" style="max-width: 700px; border-radius: 1rem;">
                <h3 class="text-center mb-4">Edit News Article</h3>

                <EditForm Model="news" OnValidSubmit="UpdateNews">
                    <div class="form-group mb-3">
                        <label for="title"><strong>Title *</strong></label>
                        <input type="text" id="title" @bind="news.Title" class="form-control" required />
                    </div>

                    <div class="form-group mb-3">
                        <label for="category"><strong>Category *</strong></label>
                        <select id="category" @bind="news.CategoryId" class="form-control" required>
                            <option value="">-- Select Category --</option>
                            @foreach (var category in _categoryList)
                            {
                                <option value="@category.Id">@category.CategoryName</option>
                            }
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label for="description"><strong>Description *</strong></label>
                        <textarea id="description" @bind="news.Description" class="form-control" rows="4" required></textarea>
                    </div>

                    @if (!string.IsNullOrEmpty(news.ImageUrl))
                    {
                        <div class="mb-3 text-center">
                            <img src="@news.ImageUrl" alt="Current Image" class="img-fluid rounded shadow-sm mb-2" style="max-height: 200px; object-fit: cover;" />
                            <p class="text-muted"><em>Click below to update the image</em></p>
                        </div>
                    }

                    <div class="form-group mb-4">
                        <label for="image"><strong>Image *</strong></label>
                        <InputFile id="image" OnChange="HandleFileChange" required="@string.IsNullOrEmpty(news.ImageUrl)" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-success w-100">
                        @if (isUpdating)
                        {
                            <span>
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                Updating...
                            </span>
                        }
                        else
                        {
                            <span>Update News</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>

    </form>
}


@code {
    [Parameter]
    public int Id{ get; set; }

    private NewsEntity news;

    private List<Category> _categoryList = new();


    private bool isUpdating = false;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Set the destination folder inside wwwroot (e.g., /images/)
            var folderPath = Path.Combine(_webhost.ContentRootPath, "wwwroot", "images");

            // Make sure the folder exists
            // if (!Directory.Exists(folderPath))
            // {
            //     Directory.CreateDirectory(folderPath);
            // }

            // Generate a unique file name to avoid collisions
            var fileName = Path.Combine(folderPath, Guid.NewGuid().ToString() + Path.GetExtension(file.Name));

            // Save the file to the folder
            using (var fileStream = new FileStream(fileName, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }

            // Set the image URL to be sent to the database
            news.ImageUrl = $"/images/{Path.GetFileName(fileName)}"; // URL to store in the database
        }
    }

    private async Task UpdateNews()
    {
        isUpdating = true;
        var response = await _http.PutAsJsonAsync($"api/News/edit/{Id}", news);

        if(response.IsSuccessStatusCode)
        {
            await Task.Delay(2000);
            Navigation.NavigateTo("/AllNews");
        }
        else
        {
            Console.WriteLine("Error updating News");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        news = await _http.GetFromJsonAsync<NewsEntity>($"api/News/{Id}");
        _categoryList = await _http.GetFromJsonAsync<List<Category>>("/api/Categories/GetCategories");

    }

}
